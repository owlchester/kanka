/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Module/BragiModal.ts":
/*!**********************************!*\
  !*** ./src/Module/BragiModal.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _EventManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventManager */ "./src/Module/EventManager.ts");

var BragiModal = /** @class */ (function () {
    function BragiModal(options) {
        this.options = $.extend({
            // modal max height
            maxHeight: 500,
            // modal title
            title: 'Kanka Bragi',
            // close button text
            close_text: 'Close',
            // save button text
            ok_text: 'Add',
        }, options);
        this.event = new _EventManager__WEBPACK_IMPORTED_MODULE_0__["default"]();
        this.template = this.getModalTemplate();
        this.$modal = $(this.template).hide();
        this.addStyleToDom();
        this.setOptions();
        this.attachEvents();
    }
    BragiModal.prototype.setOptions = function () {
        this.$modal.find('.modal-body').css('max-height', this.options.maxHeight);
        this.$modal.find('.modal-title').html(this.options.title);
        this.$modal.find('#close').html(this.options.close_text);
    };
    // append data to the modal with data object
    BragiModal.prototype.addData = function (data) {
        //console.log('bragi', 'addData', data);
        this.$modal.find('.header-text').html(data.header);
        if (data.error) {
            //console.log('bradi', 'error', data.error);
            this.showError(data.message, true);
            return;
        }
        this.showForm(data);
        return;
    };
    // append generated data to the modal with data object
    BragiModal.prototype.addGenerated = function (data) {
        //console.log('bragi', 'addGenerated', data);
        this.availableTokens(data.tokens);
        if (data.error) {
            this.showError(data.message, true);
            return;
        }
        this.$modal.find('.generated').html(data.result).show();
        this.$modal.find('.modal-footer').show();
        if (data.tokens === 0) {
            this.$modal.find('form').hide();
            this.showError(data.message, true);
        }
    };
    BragiModal.prototype.showError = function (message_text, permanent) {
        if (permanent === void 0) { permanent = false; }
        var $message = this.$modal.find('.message');
        $message.html('<p class="alert alert-danger">' + message_text + '</p>');
        $message.show();
        if (!permanent) {
            setTimeout(function () {
                $message.html('').hide();
            }, 5000);
        }
    };
    BragiModal.prototype.showForm = function (data) {
        // Inject placeholders and stuff
        this.$modal.find('input').attr('placeholder', data.texts.placeholder);
        this.$modal.find('input').attr('maxlength', data.limits.prompt);
        this.$modal.find('button[name="submit"]').html(data.texts.submit);
        this.$modal.find('button[name="insert"]').html(data.texts.insert);
        this.$modal.find('.bragi-loading').html(data.texts.loading);
        this.$modal.find('.token-count').html(data.tokens);
        this.$modal.find('.token-text').html(data.texts.tokens);
        this.$modal.find('input').focus();
        this.availableTokens(data.tokens);
        var $form = this.$modal.find('form[name="bragi-form"]');
        $form.show();
    };
    BragiModal.prototype.showLoading = function () {
        this.$modal.find('.bragi-loader').show();
    };
    BragiModal.prototype.hideLoading = function () {
        this.$modal.find('.bragi-loader').hide();
    };
    BragiModal.prototype.showGenerating = function () {
        this.$modal.find('.bragi-loader').show();
        this.$modal.find('input').prop('disabled', true);
        this.$modal.find('button[name="submit"]').prop('disabled', true);
        this.$modal.find('.modal-footer').hide();
        this.$modal.find('.generated').hide();
    };
    BragiModal.prototype.hideGenerating = function () {
        this.$modal.find('.bragi-loader').hide();
        this.$modal.find('input').removeAttr('disabled').focus();
        this.$modal.find('button[name="submit"]').removeAttr('disabled');
    };
    BragiModal.prototype.hideErrors = function () {
        this.$modal.find('.message').html('');
    };
    BragiModal.prototype.attachEvents = function () {
        var _this = this;
        var $modal = this.$modal;
        // Submitting the form
        $modal.find('form').submit(function (event) {
            var prompt = $modal.find('input').val();
            // Adding context is optional
            var nameField = $('[name="name"]');
            var context = {};
            if (nameField) {
                var bragiName = nameField.data('bragi-name');
                context.name = bragiName ? bragiName : nameField.val();
            }
            var genderField = $('[name="sex"]');
            if (genderField) {
                context.gender = genderField.val();
            }
            var pronounsField = $('[name="pronouns"]');
            if (pronounsField) {
                context.pronouns = pronounsField.val();
            }
            _this.hideErrors();
            _this.event.trigger('generate', [_this, prompt, context]);
            return false;
        });
        $modal.find('button[name="insert"]').click(function (event) {
            _this.event.trigger('beforeSave', [_this]);
            $modal.modal('hide');
            _this.event.trigger('save', [_this, $modal.find('.generated').html()]);
            _this.event.trigger('afterSave', [this]);
        });
        /*$modal.find("button#save").click(function(event: any) {
            var $selected_img = $modal.find('.img-item img.' + _this.select_class);

            if (! $selected_img.length) {
                _this.showError(_this.options.noImageSelected_msg);
                return;
            }

            $modal.modal('hide')

            _this.event.trigger('beforeSave', [_this]);

            $selected_img.each(function(index: any, el: any) {
                _this.event.trigger('save', [_this, $(this)]);

                $(this).removeClass(_this.select_class);
            });

            _this.event.trigger('afterSave', [this]);
        });*/
        $modal.on('hidden.bs.modal', function () {
            _this.event.trigger('close');
        });
    };
    BragiModal.prototype.open = function () {
        this.$modal.modal();
    };
    BragiModal.prototype.clearContent = function () {
        // Reset the initial html
        this.$modal.find('.images-list').html('');
    };
    BragiModal.prototype.getModalTemplate = function () {
        var bootsrap_version = parseInt($.fn.modal.Constructor.VERSION);
        var header_content = [
            '<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>',
            '<h4 class="modal-title">[bragi title]</h4>'
        ];
        var modal_html = '' +
            '<div class="modal summernote-bragi fade" tabindex="-1" role="dialog">'
            + '<div class="modal-lg modal-dialog ">'
            + '<div class="modal-content">'
            + '<div class="modal-header">'
            + (bootsrap_version == 3 ? header_content.join('') : header_content.reverse().join(''))
            + '</div>'
            + '<div class="modal-body p-8 flex flex-col gap-4 md:gap-5">'
            + '<div class="flex gap-5">'
            + '<img src="/images/bragi/bragi.png" alt="Bragi" class="flex-none w-40 h-40" />'
            + '<div class="flex-grow flex flex-col gap-2">'
            + '<p class="text-neutral-content header-text"></p>'
            + '<p class="text-neutral-content token-text"></p>'
            + '</div>'
            + '</div>'
            + '<form method="GET" action="" name="bragi-form" class="flex gap-1" style="display: none">'
            + '<input type="text" name="prompt" class="w-full" data-skip-unsaved="true" />'
            + '<button type="submit" name="submit" class="btn2 btn-primary"></button>'
            + '</form>'
            + '<div class="message" style="display: none"></div >'
            + '<div class="generated text-break" style="display: none"></div>'
            + '<div class="text-center bragi-loader" style="display: none">'
            + '<i class="fa-solid fa-spinner fa-spin fa-3x" aria-hidden="true"></i>'
            + '<p class="bragi-loading"></p>'
            + '</div>'
            + '</div>'
            + '<div class="modal-footer" style="display: none">'
            + '<button name="insert" class="btn2 btn-primary"></button>'
            + '</div>'
            + '</div>'
            + '</div>'
            + '</div>';
        return modal_html;
    };
    BragiModal.prototype.addStyleToDom = function () {
        this.$css = $('<style>'
            + '.modal.summernote-bragi .modal-body{'
            + 'overflow: scroll;'
            + '}'
            + '</style>');
        this.$css.appendTo('body');
    };
    BragiModal.prototype.availableTokens = function (tokens) {
        this.$modal.find('.token-amount').html(tokens);
    };
    return BragiModal;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BragiModal);


/***/ }),

/***/ "./src/Module/DataManager.ts":
/*!***********************************!*\
  !*** ./src/Module/DataManager.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _EventManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventManager */ "./src/Module/EventManager.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var DataManager = /** @class */ (function () {
    function DataManager(options) {
        this.options = __assign({
            // full http url for fetching data
            url: null,
            // array of objects with 'src' and 'title' keys
            data: [],
            // the key name that holds the data array
            responseDataKey: 'data',
            // the key name that holds the next page link
            nextPageKey: 'links.next',
        }, options);
        this.init();
    }
    DataManager.prototype.init = function () {
        this.current_page = 0;
        this.is_fetching_locked = false;
        this.event = new _EventManager__WEBPACK_IMPORTED_MODULE_0__["default"]();
        this.fetch_url = this.options.url;
        this.fetch_type = this.options.data.length ? 'data' : (this.fetch_url ? 'url' : null);
    };
    // stop data fetching if neither next page link nor data were found
    DataManager.prototype.setNextFetch = function (response) {
        if (response.next_link && response.data.length) {
            this.fetch_url = response.next_link;
        }
        else {
            this.lockFetching();
        }
    };
    DataManager.prototype.lockFetching = function () {
        this.is_fetching_locked = true;
    };
    DataManager.prototype.unlockFetching = function () {
        this.is_fetching_locked = false;
    };
    DataManager.prototype.parseResponse = function (response) {
        return {
            response: response
        };
    };
    DataManager.prototype.fetchData = function () {
        var _this = this;
        if (this.fetch_type == 'data') {
            this.event.trigger('beforeFetch');
            this.event.trigger('fetch', [_this.options.data]);
            this.event.trigger('afterFetch');
        }
        else if (this.fetch_type == 'url') {
            // Prevent simultaneous requests.
            // Because we need to get the next page link from each request,
            // they must be synchronous.
            if (this.is_fetching_locked)
                return;
            var current_link_1 = _this.fetch_url;
            this.event.trigger('beforeFetch');
            this.lockFetching();
            $.ajax({
                url: current_link_1,
                beforeSend: function (xhr) {
                    // set the request link to get it afterwards in the response
                    xhr.request_link = current_link_1;
                },
            })
                .always(function () {
                // this is the first callback to be called when the request finises
                _this.unlockFetching();
            })
                .done(function (response, status_text, xhr) {
                _this.event.trigger('fetch', [
                    response,
                    _this.current_page,
                    xhr.request_link,
                ]);
            })
                .fail(function () {
                _this.event.trigger('error', ["problem loading from " + current_link_1]);
            })
                .always(function () {
                _this.event.trigger('afterFetch');
            });
        }
        else {
            _this.event.trigger('error', ["options 'data' or 'url' must be set"]);
        }
    };
    DataManager.prototype.generate = function (prompt, fields) {
        //console.log('DataManager', 'generate');
        var _this = this;
        this.event.trigger('beforeGenerating');
        var current_link = _this.fetch_url;
        fields.prompt = prompt;
        $.ajax({
            url: current_link,
            method: 'POST',
            data: fields,
            beforeSend: function (xhr) {
                // set the request link to get it afterwards in the response
                xhr.request_link = current_link;
            },
        })
            .always(function () {
            // this is the first callback to be called when the request finises
            _this.unlockFetching();
        })
            .done(function (response, status_text, xhr) {
            _this.event.trigger('generate', [
                response,
                xhr.request_link,
            ]);
        })
            .fail(function (error) {
            _this.event.trigger('error', [error.responseJSON.message]);
        })
            .always(function () {
            _this.event.trigger('afterGenerating');
        });
    };
    return DataManager;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataManager);


/***/ }),

/***/ "./src/Module/EventManager.ts":
/*!************************************!*\
  !*** ./src/Module/EventManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var EventManager = /** @class */ (function () {
    function EventManager() {
        // events store
        this.events_queue = {};
    }
    // Register an event
    EventManager.prototype.on = function (event_name, closure) {
        // @ts-ignore
        if (!Array.isArray(this.events_queue[event_name])) {
            // @ts-ignore
            this.events_queue[event_name] = [];
        }
        // @ts-ignore
        this.events_queue[event_name].push(closure);
        return this;
    };
    // Fire an event
    EventManager.prototype.trigger = function (event_name, params) {
        if (params === void 0) { params = []; }
        // @ts-ignore
        var events = this.events_queue[event_name] || [];
        for (var i = 0; i < events.length; i++) {
            events[i].apply(this, params);
        }
        return this;
    };
    EventManager.prototype.clearAll = function () {
        this.events_queue = {};
        return this;
    };
    return EventManager;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventManager);


/***/ }),

/***/ "./src/Module/SummernoteBragi.ts":
/*!***************************************!*\
  !*** ./src/Module/SummernoteBragi.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _BragiModal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BragiModal */ "./src/Module/BragiModal.ts");
/* harmony import */ var _DataManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DataManager */ "./src/Module/DataManager.ts");


var SummernoteBragi = /** @class */ (function () {
    function SummernoteBragi(options) {
        this.options = $.extend({
            name: 'bragi',
            buttonLabel: '<i class="fa-solid fa-robot"></i>',
            tooltip: 'Bragi'
        }, options);
        this.plugin_default_options = {};
    }
    // set the focus to the last focused element in the editor
    SummernoteBragi.prototype.recoverEditorFocus = function () {
        var last_focused_el = $(this.editor).data('last_focused_element');
        if (typeof last_focused_el !== "undefined") {
            var editor = this.editable;
            var range = document.createRange();
            var sel = window.getSelection();
            var cursor_position = last_focused_el.length;
            range.setStart(last_focused_el, cursor_position);
            range.collapse(true);
            sel.removeAllRanges();
            sel.addRange(range);
            editor.focus();
        }
    };
    SummernoteBragi.prototype.saveLastFocusedElement = function () {
        var focused_element = window.getSelection().focusNode;
        var parent = $(this.editable).get(0);
        if ($.contains(parent, focused_element)) {
            $(this.editor).data('last_focused_element', focused_element);
        }
    };
    SummernoteBragi.prototype.attachEditorEvents = function () {
        var _this = this;
        $(this.editable).on('keypress, mousemove', function () {
            _this.saveLastFocusedElement();
        });
        $(this.editable).on('click', 'summernote-bragi-brick .delete', function () {
            // delete brick
        });
        $(this.editable).on('click', 'summernote-bragi-brick .edit', function () {
            var $brick = $(this).parents('summernote-bragi-brick');
            var data = $brick.data('brick'); // json
            _this.modal.open(data);
        });
    };
    SummernoteBragi.prototype.initBragi = function (context) {
        this.context = context;
        this.editor = this.context.layoutInfo.note;
        this.editable = this.context.layoutInfo.editable;
        this.plugin_options = $.extend(this.plugin_default_options, this.context.options[this.options.name] || {});
        this.modal = new _BragiModal__WEBPACK_IMPORTED_MODULE_0__["default"](this.plugin_options.modal);
        this.data_manager = new _DataManager__WEBPACK_IMPORTED_MODULE_1__["default"](this.plugin_options.source);
        this.attachModalEvents();
        this.attachEditorEvents();
    };
    SummernoteBragi.prototype.attachModalEvents = function () {
        var _this = this;
        this.modal.event.on('beforeSave', function (bragi_modal) {
            _this.recoverEditorFocus();
        });
        this.modal.event.on('save', function (bragi_modal, generatedText) {
            // add selected images to summernote editor
            _this.context.invoke('editor.pasteHTML', '<p>' + generatedText + '</p>');
        });
        this.modal.event.on('generate', function (random, prompt, fields) {
            _this.data_manager.generate(prompt, fields);
        });
        this.modal.event.on('close', function (bragi_modal) {
            _this.data_manager.init();
            _this.modal.clearContent();
        });
    };
    SummernoteBragi.prototype.createButton = function () {
        var _this = this;
        var button = $.summernote.ui.button({
            className: 'w-100',
            contents: this.options.buttonLabel,
            tooltip: this.options.tooltip,
            click: function () {
                _this.openBragi();
            }
        });
        // create jQuery object from button instance.
        return button.render();
    };
    SummernoteBragi.prototype.attachDataEvents = function () {
        var _this = this;
        this.data_manager.event
            .on('beforeFetch', function () {
            _this.modal.showLoading();
        })
            .on('beforeGenerating', function () {
            _this.modal.showGenerating();
        })
            .on('fetch', function (data) {
            _this.modal.addData(data);
        })
            .on('generate', function (data) {
            _this.modal.addGenerated(data);
        })
            .on('afterFetch', function () {
            _this.modal.hideLoading();
        })
            .on('afterGenerating', function () {
            _this.modal.hideGenerating();
        })
            .on('error', function (error) {
            _this.modal.showError(error, true);
        })
            .on('generateError', function (error) {
            _this.modal.showError(error);
        });
    };
    SummernoteBragi.prototype.openBragi = function () {
        this.attachDataEvents();
        this.data_manager.fetchData();
        this.modal.open();
    };
    return SummernoteBragi;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SummernoteBragi);


/***/ }),

/***/ "./src/Module/index.ts":
/*!*****************************!*\
  !*** ./src/Module/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _SummernoteBragi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SummernoteBragi */ "./src/Module/SummernoteBragi.ts");

var BragiPlugin = /** @class */ (function () {
    function BragiPlugin(options) {
        this.summernote_bragi = new _SummernoteBragi__WEBPACK_IMPORTED_MODULE_0__["default"](options);
    }
    BragiPlugin.prototype.getPlugin = function () {
        var plugin = {};
        var _this = this;
        var options = this.summernote_bragi.options;
        // @ts-ignore
        plugin[options.name] = function (context) {
            var sgOptions = context.options[options.name] || {};
            var buttonLabel = sgOptions.buttonLabel || _this.summernote_bragi.options.buttonLabel;
            _this.summernote_bragi.options.buttonLabel = buttonLabel;
            // add bragi button
            context.memo('button.' + options.name, _this.createButton());
            this.events = {
                'summernote.keyup': function (we, e) {
                    _this.summernote_bragi.saveLastFocusedElement();
                }
            };
            this.initialize = function () {
                _this.summernote_bragi.initBragi(context);
            };
        };
        return plugin;
    };
    BragiPlugin.prototype.createButton = function () {
        return this.summernote_bragi.createButton();
    };
    return BragiPlugin;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BragiPlugin);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Module */ "./src/Module/index.ts");

var gallery_plugin = new _Module__WEBPACK_IMPORTED_MODULE_0__["default"]({});
// add the plugin to summernote
$.extend($.summernote.plugins, gallery_plugin.getPlugin());

})();

/******/ })()
;
//# sourceMappingURL=summernote-bragi.min.js.map